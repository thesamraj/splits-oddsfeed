name: collector-kambi

on:
  push:
    branches: [main]
    paths:
      - 'collector-kambi/**'
      - '.github/workflows/collector-kambi.yml'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE: ghcr.io/${{ github.repository }}/collector-kambi

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build & push (multi-arch)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./collector-kambi
          file: ./collector-kambi/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true

      - name: Inspect image we just pushed (short SHA, then fallbacks)
        run: |
          set -euo pipefail
          SHA7="${GITHUB_SHA::7}"
          echo "Metadata tags pushed:"
          echo '${{ steps.meta.outputs.tags }}'

          echo "Trying tag: ${IMAGE}:sha-${SHA7}"
          if docker buildx imagetools inspect "${IMAGE}:sha-${SHA7}"; then
            echo "Found sha-short tag."
          else
            echo "sha-short not found; trying :main"
            if docker buildx imagetools inspect "${IMAGE}:main"; then
              echo ":main exists."
            else
              echo ":main not found; trying digest from build output"
              docker buildx imagetools inspect "${IMAGE}@${{ steps.build.outputs.digest }}"
            fi
          fi

          echo "Verifying both platforms are present:"
          docker buildx imagetools inspect "${IMAGE}:sha-${SHA7}" 2>/dev/null \
            | grep -E 'linux/(amd64|arm64)' | sort -u || true
