name: Docker
on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'api/**'
      - 'collector-agg/**'
      - 'collector-kambi/**'
      - '.github/workflows/docker.yml'
  pull_request:
    paths:
      - 'api/**'
      - 'collector-agg/**'
      - 'collector-kambi/**'
      - '.github/workflows/docker.yml'
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-api:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR with PAT if available
        if: ${{ secrets.GHCR_PAT != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Login to GHCR with GITHUB_TOKEN (fallback)
        if: ${{ secrets.GHCR_PAT == '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/${{ github.repository }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}

      - uses: docker/build-push-action@v6
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-collector-agg:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR with PAT if available
        if: ${{ secrets.GHCR_PAT != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Login to GHCR with GITHUB_TOKEN (fallback)
        if: ${{ secrets.GHCR_PAT == '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/metadata-action@v5
        id: meta-agg
        with:
          images: ghcr.io/${{ github.repository }}/collector-agg
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}

      - uses: docker/build-push-action@v6
        with:
          context: ./collector-agg
          file: ./collector-agg/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta-agg.outputs.tags }}
          labels: ${{ steps.meta-agg.outputs.labels }}

  build-collector-kambi:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      sha_tag: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR with PAT if available
        if: ${{ secrets.GHCR_PAT != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Login to GHCR with GITHUB_TOKEN (fallback)
        if: ${{ secrets.GHCR_PAT == '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/metadata-action@v5
        id: meta-kambi
        with:
          images: ghcr.io/${{ github.repository }}/collector-kambi
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - uses: docker/build-push-action@v6
        with:
          context: ./collector-kambi
          file: ./collector-kambi/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta-kambi.outputs.tags }}
          labels: ${{ steps.meta-kambi.outputs.labels }}

  smoke-kambi:
    runs-on: ubuntu-latest
    needs: [build-collector-kambi]
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR with PAT if available
        if: ${{ secrets.GHCR_PAT != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Login to GHCR with GITHUB_TOKEN (fallback)
        if: ${{ secrets.GHCR_PAT == '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up environment
        run: |
          cat > .env <<EOF
          POSTGRES_USER=odds
          POSTGRES_PASSWORD=odds
          POSTGRES_DB=oddsfeed
          DATABASE_URL=postgresql://odds:odds@store:5432/oddsfeed
          REDIS_URL=redis://broker:6379/0
          REGION=CA
          PROXY_MANAGER_URL=http://proxy-manager:8099

          # Kambi collector settings (mock mode)
          COLLECTOR_KAMBI_IMAGE=ghcr.io/${{ github.repository }}/collector-kambi:${{ github.sha }}
          KAMBI_BASE_URL=https://eu-offering.kambicdn.org/offering/v2018
          KAMBI_BRAND=betrivers
          KAMBI_LOCALE=en_US
          KAMBI_SPORT=american_football
          KAMBI_LEAGUE=nfl
          KAMBI_POLL_INTERVAL=2
          KAMBI_USE_MOCK=true
          EOF

      - name: Start services
        run: docker compose up -d store broker normalizer api collector-kambi

      - name: Wait for health
        run: |
          # Wait for broker and store health
          echo "Waiting for broker and store to be healthy..."
          timeout=120
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            broker_health=$(docker inspect --format='{{.State.Health.Status}}' $(docker compose ps -q broker) 2>/dev/null || echo "none")
            store_health=$(docker inspect --format='{{.State.Health.Status}}' $(docker compose ps -q store) 2>/dev/null || echo "none")

            if [ "$broker_health" = "healthy" ] && [ "$store_health" = "healthy" ]; then
              echo "✅ Broker and store are healthy"
              break
            fi

            echo "Waiting... broker=$broker_health store=$store_health"
            sleep 2
            elapsed=$((elapsed + 2))
          done

          if [ $elapsed -ge $timeout ]; then
            echo "❌ Timeout waiting for broker/store health"
            exit 1
          fi

          # Wait for API health
          echo "Waiting for API to be ready..."
          timeout=120
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            if curl -fsS http://localhost:8080/health | jq -e '.status=="ok"' >/dev/null 2>&1; then
              echo "✅ API is healthy"
              break
            fi

            echo "Waiting for API..."
            sleep 2
            elapsed=$((elapsed + 2))
          done

          if [ $elapsed -ge $timeout ]; then
            echo "❌ Timeout waiting for API health"
            exit 1
          fi

      - name: Smoke test - check for NFL odds
        run: |
          echo "Testing NFL odds endpoint..."
          timeout=120
          elapsed=0
          success=false

          while [ $elapsed -lt $timeout ]; do
            count=$(curl -fsS "http://localhost:8080/odds?league=NFL&limit=3" | jq -r '.count // 0' 2>/dev/null || echo "0")

            if [ "$count" -gt "0" ]; then
              echo "✅ SUCCESS: Found $count NFL odds entries"
              success=true
              break
            fi

            echo "Waiting for NFL odds... (count=$count, elapsed=${elapsed}s)"
            sleep 5
            elapsed=$((elapsed + 5))
          done

          if [ "$success" != "true" ]; then
            echo "❌ FAILED: No NFL odds found after ${timeout}s"
            exit 1
          fi

      - name: Upload logs on failure
        if: failure()
        run: |
          echo "Collecting logs for debugging..."
          docker compose logs > kambi_smoke_logs.txt 2>&1

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: kambi-smoke-logs
          path: kambi_smoke_logs.txt
          retention-days: 7
