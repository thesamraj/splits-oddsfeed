
services:

  collector-kambi-browser:
    build: ./collector-kambi-browser
    environment:
      REDIS_URL: ${REDIS_URL:-redis://broker:6379/0}
      REDIS_CHANNEL: ${REDIS_CHANNEL_KAMBI:-odds.raw.kambi}
      KAMBI_STATE_URL: ${KAMBI_STATE_URL:-https://pa.betrivers.com/?page=sportsbook#american_football/nfl}
      KAMBI_CAPTURE_PATTERNS: ${KAMBI_CAPTURE_PATTERNS:-/offering/.*(v2018|events|selections)|e0-api.kambi.com/.*}
      KAMBI_STORAGE: ${KAMBI_STORAGE:-/app/state/kambi-browser/state.json}
      KAMBI_BROWSER_HEADFUL: ${KAMBI_BROWSER_HEADFUL:-false}
      KAMBI_LAST_RESORT_AFTER_SEC: ${KAMBI_LAST_RESORT_AFTER_SEC:-15}
      KAMBI_NAV_TIMEOUT_SEC: ${KAMBI_NAV_TIMEOUT_SEC:-25}
      PROXY_URL: ${PROXY_URL:-}
      PROXY_MANAGER_URL: ${PROXY_MANAGER_URL:-}
    volumes:
      - ./state/kambi-browser:/app/state/kambi-browser
      - ./artifacts:/app/artifacts
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "9118:9118"
    restart: unless-stopped
broker:
    image: redis:7.2
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
  store:
    image: timescale/timescaledb:2.21.2-pg16
    platform: linux/amd64
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-oddsfeed}
      POSTGRES_USER: ${POSTGRES_USER:-odds}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-odds}
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries=timescaledb"
    command: ["postgres", "-c", "shared_preload_libraries=timescaledb"]
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-odds} -d ${POSTGRES_DB:-oddsfeed}"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
  api:
    build: ./api
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
    depends_on:
      broker:
        condition: service_healthy
      store:
        condition: service_healthy
    healthcheck:
      test: [CMD-SHELL, 'curl -fsS http://localhost:8080/health >/dev/null']
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 15s
    restart: unless-stopped
  normalizer:
    build: ./normalizer
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
    depends_on:
      broker:
        condition: service_healthy
      store:
        condition: service_healthy
    restart: unless-stopped
  collector-dk:
    build: ./collector-dk
    environment:
      REDIS_URL: ${REDIS_URL}
      BOOK_NAME: draftkings
      PROXY_MANAGER_URL: ${PROXY_MANAGER_URL}
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "9101:9101"
    restart: unless-stopped
  collector-fd:
    build: ./collector-fd
    environment:
      REDIS_URL: ${REDIS_URL}
      BOOK_NAME: fanduel
      PROXY_MANAGER_URL: ${PROXY_MANAGER_URL}
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "9102:9102"
    restart: unless-stopped
  collector-mgm:
    build: ./collector-mgm
    environment:
      REDIS_URL: ${REDIS_URL}
      BOOK_NAME: mgm
      PROXY_MANAGER_URL: ${PROXY_MANAGER_URL}
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "9103:9103"
    restart: unless-stopped
  collector-b365:
    build: ./collector-b365
    environment:
      REDIS_URL: ${REDIS_URL}
      BOOK_NAME: bet365
      PROXY_MANAGER_URL: ${PROXY_MANAGER_URL}
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "9104:9104"
    restart: unless-stopped
  collector-stake:
    build: ./collector-stake
    environment:
      REDIS_URL: ${REDIS_URL}
      BOOK_NAME: stake
      PROXY_MANAGER_URL: ${PROXY_MANAGER_URL}
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "9105:9105"
    restart: unless-stopped
  proxy-manager:
    build: ./proxy-manager
    ports:
      - "8099:8099"
    restart: unless-stopped
  prometheus:
    image: prom/prometheus:v2.54.1
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
  grafana:
    image: grafana/grafana:11.1.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
  collector-agg:
    build: ./collector-agg
    environment:
      REDIS_URL: ${REDIS_URL}
      AGG_BASE_URL: ${AGG_BASE_URL}
      AGG_API_KEY: ${AGG_API_KEY}
      AGG_USE_MOCK: ${AGG_USE_MOCK}
      AGG_FETCH_INTERVAL: ${AGG_FETCH_INTERVAL}
      AGG_DAILY_REQUEST_BUDGET: ${AGG_DAILY_REQUEST_BUDGET}
      AGG_SPORT: ${AGG_SPORT}
      AGG_MARKETS: ${AGG_MARKETS}
      AGG_REGION: ${AGG_REGION}
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "9106:9106"
    restart: unless-stopped
  collector-kambi:
    image: ${COLLECTOR_KAMBI_IMAGE:-ghcr.io/thesamraj/splits-oddsfeed/collector-kambi:latest}
    environment:
      REDIS_URL: ${REDIS_URL}
      KAMBI_BASE_URL: ${KAMBI_BASE_URL}
      KAMBI_BRAND: ${KAMBI_BRAND}
      KAMBI_LOCALE: ${KAMBI_LOCALE}
      KAMBI_SPORT: ${KAMBI_SPORT}
      KAMBI_LEAGUE: ${KAMBI_LEAGUE}
      KAMBI_POLL_INTERVAL: ${KAMBI_POLL_INTERVAL}
      KAMBI_USE_MOCK: ${KAMBI_USE_MOCK}
      PROXY_URL: ${PROXY_URL}
      PROXY_MANAGER_URL: ${PROXY_MANAGER_URL}
      PROXY_LEASE_PATH: ${PROXY_LEASE_PATH:-/lease}
      PROXY_RELEASE_PATH: ${PROXY_RELEASE_PATH:-/release}
      PROXY_BOOK: ${PROXY_BOOK:-kambi}
      PROXY_REGION: ${PROXY_REGION:-us}
      PROXY_ROTATE_AFTER_ERRORS: ${PROXY_ROTATE_AFTER_ERRORS:-3}
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "9117:9107"
    restart: unless-stopped
volumes:
  pgdata:
  redis-data:
  prometheus-data:
  grafana-data:
networks:
  default:
    driver: bridge
