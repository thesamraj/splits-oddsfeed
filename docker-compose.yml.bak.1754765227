services:
  broker:
    image: redis:7.2
    ports:
    - 6379:6379
    volumes:
    - redis-data:/data
    healthcheck:
      test:
      - CMD-SHELL
      - redis-cli -h 127.0.0.1 -p 6379 ping | grep -q PONG
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s
    restart: unless-stopped
    command:
    - redis-server
    - --save
    - ''
    - --appendonly
    - 'no'
  store:
    image: postgres:16
    platform: linux/amd64
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-oddsfeed}
      POSTGRES_USER: ${POSTGRES_USER:-odds}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-odds}
    ports:
    - 5432:5432
    volumes:
    - pgdata:/var/lib/postgresql/data
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U ${POSTGRES_USER:-odds} -d ${POSTGRES_DB:-oddsfeed}
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
  api:
    build: ./api
    ports:
    - 8080:8080
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
    depends_on:
      broker:
        condition: service_healthy
      store:
        condition: service_healthy
    healthcheck:
      test:
      - CMD-SHELL
      - curl -fsS http://localhost:8080/health >/dev/null
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 15s
    restart: unless-stopped      start_period: 15s
    restart: unless-stopped
  normalizer:
    build: ./normalizer
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
    depends_on:
      broker:
        condition: service_healthy
      store:
        condition: service_healthy
    restart: unless-stopped
  collector-dk:
    build: ./collector-dk
    environment:
      REDIS_URL: ${REDIS_URL}
      BOOK_NAME: draftkings
      PROXY_MANAGER_URL: ${PROXY_MANAGER_URL}
    depends_on:
      broker:
        condition: service_healthy
    ports:
    - 9101:9101
    restart: unless-stopped
  collector-fd:
    build: ./collector-fd
    environment:
      REDIS_URL: ${REDIS_URL}
      BOOK_NAME: fanduel
      PROXY_MANAGER_URL: ${PROXY_MANAGER_URL}
    depends_on:
      broker:
        condition: service_healthy
    ports:
    - 9102:9102
    restart: unless-stopped
  collector-mgm:
    build: ./collector-mgm
    environment:
      REDIS_URL: ${REDIS_URL}
      BOOK_NAME: mgm
      PROXY_MANAGER_URL: ${PROXY_MANAGER_URL}
    depends_on:
      broker:
        condition: service_healthy
    ports:
    - 9103:9103
    restart: unless-stopped
  collector-b365:
    build: ./collector-b365
    environment:
      REDIS_URL: ${REDIS_URL}
      BOOK_NAME: bet365
      PROXY_MANAGER_URL: ${PROXY_MANAGER_URL}
    depends_on:
      broker:
        condition: service_healthy
    ports:
    - 9104:9104
    restart: unless-stopped
  collector-stake:
    build: ./collector-stake
    environment:
      REDIS_URL: ${REDIS_URL}
      BOOK_NAME: stake
      PROXY_MANAGER_URL: ${PROXY_MANAGER_URL}
    depends_on:
      broker:
        condition: service_healthy
    ports:
    - 9105:9105
    restart: unless-stopped
  collector-agg:
    build: ./collector-agg
    environment:
      REDIS_URL: ${REDIS_URL}
      AGG_BASE_URL: ${AGG_BASE_URL}
      AGG_API_KEY: ${AGG_API_KEY}
      AGG_USE_MOCK: ${AGG_USE_MOCK}
      AGG_FETCH_INTERVAL: ${AGG_FETCH_INTERVAL}
    depends_on:
      broker:
        condition: service_healthy
    ports:
    - 9106:9106
    restart: unless-stopped
  proxy-manager:
    build: ./proxy-manager
    ports:
    - 8099:8099
    restart: unless-stopped
  prometheus:
    image: prom/prometheus:v2.54.1
    ports:
    - 9090:9090
    volumes:
    - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    - prometheus-data:/prometheus
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/etc/prometheus/console_libraries
    - --web.console.templates=/etc/prometheus/consoles
    restart: unless-stopped
  grafana:
    image: grafana/grafana:11.1.0
    ports:
    - 3000:3000
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
    - grafana-data:/var/lib/grafana
    - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
    - prometheus
    restart: unless-stopped
volumes:
  pgdata: null
  redis-data: null
  prometheus-data: null
  grafana-data: null
networks:
  default:
    driver: bridge
